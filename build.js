const fs = require('fs')
const utils = require('./utils')

module.exports.buildFontProvider = (pngfile) => {
    const meta = JSON.parse(fs.readFileSync('./gen/' + pngfile + '.json'))
    const id = pngfile.replace('.png', '')
    let str = ''

    for(let i = 0; i < 1; i++) {
        str += '\\' + 'u' + utils.generateFontChar().toUpperCase()
    }

    return {
        id: id.substring(1, id.length),
        type: 'bitmap',
        file: 'holoright:font' + pngfile,
        ascent: meta.ascent,
        height: meta.height,
        chars: [str]
    }
}

module.exports.copyPngFile = (genFile) => {
    if(!fs.existsSync('./res/assets/holoright/font'))
        fs.mkdirSync('./res/assets/holoright/font', {
            recursive: true
        })
    
    fs.copyFileSync('./gen/' + genFile, './res/assets/holoright/font/' + genFile)
}

module.exports.buildAll = () => {

    if(fs.existsSync('./res'))
        fs.rmSync('./res', { recursive: true, force: true })
    
    if(!fs.existsSync('./res/assets/minecraft/font'))
        fs.mkdirSync('./res/assets/minecraft/font', {
            recursive: true
        })

    const providers = []
    const files = utils.scanAllFiles('./gen')

    files.forEach(file => {
        if(file.endsWith('.png')) {
            console.log('Building: ' + file)
            this.copyPngFile(file.replace('./gen/', ''))
            providers.push(this.buildFontProvider(file.replace('./gen', '')))
        }
    })

    const fontMapping = {}

    providers.forEach((elem) => {
        fontMapping[elem.id] = elem.chars[0]
    })

    fs.writeFileSync('./res/fontmap.json', JSON.stringify(fontMapping).replace(/\\\\/g, '\\'))

    fs.writeFileSync('./res/assets/minecraft/font/default.json', JSON.stringify({
        _comment: 'Auto-generated by HoloRight RPB! Do not edit this file!',
        providers: providers
    }).replace(/\\\\/g, '\\'))

    fs.writeFileSync('./res/pack.mcmeta', JSON.stringify(utils.pack))

}